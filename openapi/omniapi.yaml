openapi: 3.0.3
servers:
  - url: '//petstore.swagger.io/v2'
info:
  description: >-
    This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.0
  title: Overview
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Inventory
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: Group
    description: Access to Petstore orders
  - name: Order
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  - name: Product and Variant
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  - name: Modifier
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /api/backend/inventories/update:
    post:
      tags:
        - Inventory
      summary: Add / Update Inventory
      description: ''
      operationId: addInventory
      responses:
        '200':
          description: OK
        '400':
          description: Store not found, There is no inventories to be updated, Cannot find variant with code {variant_code} 
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  /api/backend/inventories/update-out-of-stock:
    post:
      tags:
        - Inventory
      summary: Update Out of Stock Inventory
      description: ''
      operationId: updateInventory
      responses:
        '200':
          description: OK
        '400':
          description: Store is inactive, {code} is not a valid variant in store {store.code}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  /api/backend/inventories/aggregator-settings/update:
    post:
      tags:
        - Inventory
      summary: Add / Update Inventory Aggregator Settings
      description: Multiple status values can be provided with comma separated strings
      operationId: addInventorySettings
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true 
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Can't find variant {variant_code} in store {self.store.name}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  
  /api/backend/groups/update:
    post:
      tags:
        - Group
      summary: Add / Update Group
      description: Returns a map of status codes to quantities
      operationId: addGroup
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        '400':
          description: 'Invalid group assignment: {parent}, Parent group not found'
      security:
        - api_key: []
  /api/backend/groups/aggregator-settings/update:
    post:
      tags:
        - Group
      summary: Add / Update Group Aggregator Settings
      description: ''
      operationId: addGroupSettings
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: 'Duplicate aggregator settings: {AggregatorType(aggregator_setting["group"]).label} settings for group {aggregator_setting["group"]} already exists in this request, Field "aggregator_setting" is not a valid JSON array'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  /api/store/orders/get/?last_order_id=0:
    get:
      tags:
        - Order
      summary: Get Order
      description: This can only be done by the logged in user.
      operationId: getOrder
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid last order id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /api/store/orders/details?number=RRE2MM9W:
    get:
      tags:
        - Order
      summary: Get Order Details
      description: ''
      operationId: getOrderDetails
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid last order id
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /api/store/orders/paid:
    post:
      tags:
        - Order
      summary: Paid Order
      description: ''
      operationId: paidOrder
      responses:
        '200':
          description: successful operation
        '400':
          description: Order not found, Order already paid
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /api/store/orders/complete:
    post:
      tags:
        - Order
      summary: Complete Order
      description: ''
      operationId: completeOrder
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /api/store/orders/confirm:
    post:
      tags:
        - Order
      summary: Confirm Order
      description: ''
      operationId: confirmOrder
      responses:
        default:
          description: successful operation
  /api/store/orders/cancel:
    post:
      tags:
        - Order
      summary: Cancel Order
      description: ''
      operationId: cancelOrder
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /api/mobile/orders/add:
    post:
      tags:
        - Order
      summary: Add Order
      description: This can only be done by the logged in user.
      operationId: addOrder
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /api/backend/products/update:
    post:
      tags:
        - Product and Variant
      summary: Add / Update Product & Variant
      description: This can only be done by the logged in user.
      operationId: addProduct
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /api/backend/products/variants/aggregator-settings/update:
    post:
      tags:
        - Product and Variant
      summary: Add / Update Variant Aggregator Settings
      description: This can only be done by the logged in user.
      operationId: addVariantSettings
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /api/backend/groups/set-variants:
    post:
      tags:
        - Product and Variant
      summary: Add / Update Variant Group
      description: This can only be done by the logged in user.
      operationId: addVariantGroup
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
  /api/backend/modifier-groups/aggregator-settings/update:
    post:
      tags:
        - Modifier
      summary: Add / Update Modifier Aggregator Settings
      description: This can only be done by the logged in user.
      operationId: addModifierSettings
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  responses:
    PetResponse:
      description: successful operation
      content:
        application/xml:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
